node {
    
stage('Git CheckOut') {    
git url: 'https://github.com/pyamgar/devops-mindtree-20191115.git'
}


def project_path = "atmosphere/spring-boot-samples/spring-boot-sample-atmosphere"
dir(project_path) {

stage('Clean Old Packages') {
sh label: 'Clean', script: 'mvn clean'
}
stage('Maven Compile') {
sh label: 'Comile', script: 'mvn compile'
}
stage('Sonar Analysis'){
        withSonarQubeEnv('localSonar'){
                    sh 'mvn sonar:sonar'
                }
}

stage('Maven Package') {
sh label: 'Testing', script: 'mvn package'
}

stage('Jfrog Artifacory'){
    script{
        def server= Artifactory.server 'artifact'
                    def uploadSpec= """{
                        "files": [{
                        "pattern": "target/*.jar",
                        "target": "Jenkins-integration"}]
                    }"""
        server.upload(uploadSpec)
    }
}

stage('Deploy Code info Docker Env.') {
sh label: 'Docker', script: 'docker-compose up -d --build'
}
   
stage('Geting Ready For Ansible') {
sh label: 'Docker', script: 'cp -rf target/*.jar ../../../terraform/ansible/templates/atmosphere-v1.jar'
sh label: 'Jenkins', script: "echo '<h1> TASK BUILD ID: ${env.BUILD_DISPLAY_NAME}</h1>' > ../../../terraform/ansible/templates/jenkins.html"
}   
    
stage('Deploy to Prod.') {
def project_path_1 = "../../../terraform"
dir(project_path_1) {    
sh label: 'terraform', script: '/usr/local/bin/terraform  init'
sh label: 'terraform', script: '/usr/local/bin/terraform  apply -input=false -auto-approve'
}     
}   
}    
}
